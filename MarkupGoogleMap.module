<?php

/**
 * ProcessWire Map Markup
 *
 * Renders maps for the FieldtypeMapMarker module
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 * USAGE:
 * ======
 *
 * Add this somewhere before your closing </head> tag:
 * 
 *    <script type='text/javascript' src='https://maps.googleapis.com/maps/api/js?sensor=false'></script>
 *  
 * In the location where you want to output your map, do the following in your template file:
 * 
 *    $map = $modules->get('MarkupGoogleMap'); 
 *    echo $map->render($page, 'map'); // replace 'map' with the name of your FieldtypeMap field
 *
 * To render a map with multiple markers on it, specify a PageArray rather than a single $page: 
 *
 *    $items = $pages->find("template=something, map!='', sort=title"); 
 *    $map = $modules->get('MarkupGoogleMap'); 
 *    echo $map->render($items, 'map'); 
 *
 * To specify options, provide a 3rd argument with an options array:
 *
 *    $map = $modules->get('MarkupGoogleMap'); 
 *    echo $map->render($items, 'map', array('height' => '500px')); 
 *
 * 
 * OPTIONS
 * =======
 * Here is a list of all possible options (with defaults shown):  
 * 
 * // default width of the map 
 * 'width' => '100%' 
 * 
 * // default height of the map
 * 'height' => '300px' 
 * 
 * // zoom level
 * 'zoom' => 12 (or $field->defaultZoom)
 * 
 * // map type: ROADMAP, HYBRID or SATELLITE
 * 'type' => 'HYBRID' or $field->defaultType
 * 
 * // map ID attribute
 * 'id' => "mgmap" 
 * 
 * // map class attribute
 * 'class' => "MarkupGoogleMap" 
 * 
 * // center latitude
 * 'lat' => $field->defaultLat 
 * 
 * // center longitude
 * 'lng' => $field->defaultLng 
 * 
 * // set to false only if you will style the map <div> yourself
 * 'useStyles' => true 
 * 
 * // allows single-marker map to use marker settings rather than map settings
 * 'useMarkerSettings' => true 
 * 
 * // field to use for the marker link, or blank to not link
 * 'markerLinkField' => 'url' 
 *
 * // field to use for the marker title
 * 'markerTitleField' => 'title' 
 * 
 * // map will automatically adjust to fit to the given markers (when multiple markers)
 * 'fitToMarkers' => true 
 *
 * // use hover box? When true, shows a tooltip-type box when you hover the marker, populated with the markerTitleField
 * // this is often more useful than the default presentation google maps uses
 * 'useHoverBox' => false
 *
 * // when useHoverBox is true, you can specify the markup used for it. Use the following (which is the default) as your starting point:
 * 'hoverBoxMarkup' => "<div data-top='-10' data-left='15' style='background: #000; color: #fff; padding: 0.25em 0.5em; border-radius: 3px;'></div>", 
 *
 * // FUll URL to icon file to use for markers. Blank=use default Google marker icon. 
 * 'icon' => '', 
 *
 */

class MarkupGoogleMap extends WireData implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => 'Map Markup (Google Maps)',
			'version' => 101,
			'summary' => 'Renders Google Maps for the MapMarker Fieldtype',
			'requires' => 'FieldtypeMapMarker',
			);
	}

	/**
	 * Include our MapMarker class, which serves as the value for fields of type FieldtypeMapMarker
	 *
	 */
	public function init() {	
		require_once(dirname(__FILE__) . '/MapMarker.php'); 
	}

	public function getOptions($fieldName) {

		static $n = 0; 
		$field = $this->fields->get($fieldName);
		$template = $this->url;
		if(!$field) throw new WireException("Unknown field: $fieldName"); 

		return array(
			'useStyles' => true, 
			'fitToMarkers' => true, 
			'useMarkerSettings' => true, 
			'useHoverBox' => false, 
			'hoverBoxMarkup' => "<div data-top='-10' data-left='15' style='background: #000; color: #fff; padding: 0.25em 0.5em; border-radius: 3px;'></div>", 
			'markerLinkField' => 'url', 
			'markerTitleField' => 'title', 
			'width' => '100%', 
			'height' => $field->height, 
			'zoom' => $field->defaultZoom ? (int) $field->defaultZoom : 12, 
			'type' => $field->defaultType ? $field->defaultType : 'HYBRID', 
			'id' => "mgmap" . (++$n), 
			'class' => "MarkupGoogleMap", 
			'lat' => $field->defaultLat,
			'lng' => $field->defaultLng,
			'icon' => $this->config->urls->MarkupGoogleMap.'map.svg', // url to icon (blank=use default)
			'n' => $n, 
			'markerPosition' => 'class_name',
			'telephone' => 'telephone',
			);
	}

	public function getGMapScript() {
		return '<script src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>';
	}

	/* Mod. biojazzard 12.2014 */

	public function getCustomScript($scriptName = 'richmarker', $scriptSuffix = '-compiled') {
		return "<script src='{$this->config->urls->MarkupGoogleMap}{$scriptName}{$scriptSuffix}.js'></script>";
	}

	public function getCoffeeScript() {
		return "<script src='//cdnjs.cloudflare.com/ajax/libs/coffee-script/1.6.3/coffee-script.min.js'></script>";
	}

	/*

	public function render($pageArray, $fieldName, array $options = array()) {

		static $n = 0; 
		$n++;

		$defaultOptions = $this->getOptions($fieldName); 
		$options = array_merge($defaultOptions, $options); 
		
		if($pageArray instanceof Page) {
			$page = $pageArray; 
			$pageArray = new PageArray();
			$pageArray->add($page); 
		}

		$height = $options['height']; 
		$width = $options['width'];
		if(empty($height)) $height = 300; 
		if(ctype_digit("$height")) $height .= "px";
		if(ctype_digit("$width")) $width .= "px";

		$style = '';	
		if($options['useStyles'] && !empty($height) && !empty($width)) {
			$style = " style='width: $width; height: $height;'"; 
		}	

		$lat = $options['lat'];
		$lng = $options['lng'];
		$zoom = $options['zoom'] > 0 ? (int) $options['zoom'] : $defaultOptions['zoom'];
		$type = in_array($options['type'], array('ROADMAP', 'SATELLITE', 'HYBRID')) ? $options['type'] : 'HYBRID';

		if($options['useMarkerSettings'] && (count($pageArray) == 1 || !$lat)) {
			// single marker overrides lat, lng and zoom settings
			$marker = $pageArray->first()->get($fieldName); 
			$lat = $marker->lat; 
			$lng = $marker->lng; 
			if($marker->zoom > 0) $zoom = (int) $marker->zoom;
		}

		$id = $options['id'];
		$out = '';

		if($n === 1) $out .= "<script src='{$this->config->urls->MarkupGoogleMap}MarkupGoogleMap.js'></script>";

		$out .= "<div id='$id' class='$options[class]'$style></div>";

		$out .= "<script type='text/javascript'>" .
			"if(typeof google === 'undefined' || typeof google.maps === 'undefined') { " . 
			"alert('MarkupGoogleMap Error: Please add the maps.googleapis.com script in your document head.'); " . 
			"} else { " . 
			"var $id = new MarkupGoogleMap(); " . 
			"$id.setOption('zoom', $zoom); " . 
			"$id.setOption('mapTypeId', google.maps.MapTypeId.$type); " . 
			($options['icon'] ? "$id.setIcon('$options[icon]'); " : "") . 
			($options['useHoverBox'] ? "$id.setHoverBox('" . str_replace("'", '"', $options['hoverBoxMarkup']) . "');" : "") . 
			"$id.init('$id', $lat, $lng); "; 

		// Se itera un pageArray y se saca cada Marker -> RichMarker.
		foreach($pageArray as $page) {
			$marker = $page->get($fieldName); 
			if(!$marker instanceof MapMarker) continue; 
			if(!$marker->lat) continue; 
			$url = $options['markerLinkField'] ? $page->get($options['markerLinkField']) : '';
			$title = $options['markerTitleField'] ? $page->get($options['markerTitleField']) : ''; 
			$markerPos = $options['markerPosition'] ? $page->get($options['markerPosition']) : ''; 
			$telephone = $options['telephone'] ? $page->get($options['telephone']) : ''; 
			$out .= "$id.addMarker($marker->lat, $marker->lng, '$url', '$title', '', '$marker->address', '$telephone', '$markerPos'); ";
		}

		if(count($pageArray) > 1 && $options['fitToMarkers']) $out .= "$id.fitToMarkers(); ";

		$out .= "}</script>";

		return $out; 
	}
	
	*/

	public function testPrimos($primosWireArray) {

      foreach ($primosWireArray as $pageCombo) {
        echo '<pre>';
        print_r($pageCombo->first->id);
        echo '</pre>';
        echo '<pre style="color: red;">';
        print_r($pageCombo->last->images->first->url);
        echo '</pre>';
      }

	}

	public function renderRichMarkers(WireArray $primosWireArray, $fieldName, array $options = array()) {

		if(!$primosWireArray instanceof WireArray) {
			die;
		}

		define("LB", "\n");

		function getCustomData($scriptName = 'richmarker', $scriptSuffix = '-compiled', $thisModuleURL) {
			$out = "<div id='{$scriptName}' class='hidden' style='display:none;' data-script-src='{$thisModuleURL}{$scriptName}{$scriptSuffix}.js'></div>";
			return $out;
		}

		static $n = 0; 
		$n++;

		$defaultOptions = $this->getOptions($fieldName); 
		$options = array_merge($defaultOptions, $options); 

		$height = $options['height']; 
		$width = $options['width'];
		if(empty($height)) $height = 300; 
		if(ctype_digit("$height")) $height .= "px";
		if(ctype_digit("$width")) $width .= "px";

		$style = '';	
		if($options['useStyles'] && !empty($height) && !empty($width)) {
			$style = " style='width: $width; height: $height;'"; 
		}	

		if (isset($options['lat']) && $options['lat'] != '') {
			$lat = $options['lat'];
		} else {
			$lat = 0;
		}
		if (isset($options['lng']) && $options['lng'] != '') {
			$lng = $options['lng'];
		} else {
			$lng = 0;
		}

		$zoom = $options['zoom'] > 0 ? (int) $options['zoom'] : $defaultOptions['zoom'];
		$type = in_array($options['type'], array('ROADMAP', 'SATELLITE', 'HYBRID')) ? $options['type'] : 'HYBRID';

		/* Revisar
		if($options['useMarkerSettings'] && (count($primosWireArray) == 1 || !$lat)) {
			// single marker overrides lat, lng and zoom settings
			$marker = $primosWireArray->first->get($fieldName);
			$lat = $marker->lat; 
			$lng = $marker->lng; 
			if($marker->zoom > 0) $zoom = (int) $marker->zoom;
		}
		*/

		$id = $options['id'];

		$out = '';

		if($n === 1) {
			$out .= getCustomData('MarkupGoogleMap', '.min', $this->config->urls->MarkupGoogleMap);
			$out .= getCustomData('richmarker', '-compiled', $this->config->urls->MarkupGoogleMap);
		}

		// The Map itself

		$out .= '<div id="'.$id.'" class="'.$options['class'].$style.'"></div>'.LB;

		// Se itera un pageArray y se saca cada Marker -> RichMarker.
		foreach($primosWireArray as $pageCombo) {
			$out .= "<div data-page-id=\"{$pageCombo->last->id}\" data-img-src=\"{$pageCombo->last->images->first->url}\"></div>".LB;
		}

		$out .= '<script>'."\n";

		if ($options['icon']) {
			$js_icon = $id.'.setIcon("'.$options["icon"].'"); ';
		} else {
			$js_icon = '';
		}

		if ($options['useHoverBox']) {
			$js_hover = $id.'.setHoverBox("'.str_replace('\'', '"', $options['hoverBoxMarkup']) . '");';
		} else {
			$js_hover = '';
		}

		$out .= <<<EOT
window.initMarkupGoogleMaps = function() { 
var {$id} = new MarkupGoogleMap();
{$id}.setOption("zoom", {$zoom});
{$id}.setOption("mapTypeId", google.maps.MapTypeId.{$type});
{$js_icon};
{$js_hover};
{$id}.init("{$id}", {$lat}, {$lng});
window.setTimeout(function(){ {$id}.specialStyles(); }, 666);
EOT;

		// Se itera un pageArray y se saca cada Marker -> RichMarker.
		foreach($primosWireArray as $pageCombo) {
			//$out .= "alert('".$pageCombo->first->get($fieldName)."');";
			$marker = $pageCombo->first->get($fieldName);
			if(!$marker instanceof MapMarker) {
				$out .= "console.log({$pageCombo->first->get($fieldName)});".LB;
			}

			$url = $options['markerLinkField'] ? $pageCombo->first->get('url') : '';
			$title = $options['markerTitleField'] ? $pageCombo->first->get('title') : ''; 
			$markerPos = $options['markerPosition'] ? $pageCombo->first->get('class_name') : ''; 
			$telephone = $options['telephone'] ? $pageCombo->first->get('telephone') : '';

			if(count($pageCombo->last->images)) {
				$imgsrc = $pageCombo->last->images->first->url;
				$out .= "console.log('{$imgsrc}');".LB;
			}

			$imgid = $pageCombo->last->id;

			$out .= "{$id}.addMarker({$marker->lat}, {$marker->lng}, '{$url}', '{$title}', '', '{$marker->address}', '{$telephone}', '{$markerPos}', '{$imgsrc}', {$imgid});".LB;

		}

		if(count($primosWireArray) >= 1 && $options['fitToMarkers']) $out .= $id.'.fitToMarkers(); '.LB;
		
		$out .= '}'."\n".'</script>'.LB;

		return $out; 
	}
}
